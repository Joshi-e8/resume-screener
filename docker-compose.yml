version: '3.8'

services:
  mongodb:
    image: mongo:7.0
    container_name: resume_screener_mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGODB_DB_NAME:-resume_screener}
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - resume_screener_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: resume_screener_backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - MONGODB_URL=mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGODB_DB_NAME:-resume_screener}?authSource=admin
      - MONGODB_DB_NAME=${MONGODB_DB_NAME:-resume_screener}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - BACKEND_HOST=0.0.0.0
      - BACKEND_PORT=8000
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - DEBUG=${DEBUG:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - backend_cache:/app/.cache
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - resume_screener_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: resume_screener_frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NODE_ENV=${NODE_ENV:-development}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - frontend_cache:/app/.cache
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - resume_screener_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: resume_screener_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - resume_screener_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - cache

volumes:
  mongodb_data:
  redis_data:
  backend_cache:
  frontend_cache:

networks:
  resume_screener_network:
    driver: bridge
